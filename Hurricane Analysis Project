# names of hurricanes
names = ['Cuba I', 'San Felipe II Okeechobee', 'Bahamas', 'Cuba II', 'CubaBrownsville', 'Tampico', 'Labor Day', 'New England', 'Carol', 'Janet', 'Carla', 'Hattie', 'Beulah', 'Camille', 'Edith', 'Anita', 'David', 'Allen', 'Gilbert', 'Hugo', 'Andrew', 'Mitch', 'Isabel', 'Ivan', 'Emily', 'Katrina', 'Rita', 'Wilma', 'Dean', 'Felix', 'Matthew', 'Irma', 'Maria', 'Michael']

# months of hurricanes
months = ['October', 'September', 'September', 'November', 'August', 'September', 'September', 'September', 'September', 'September', 'September', 'October', 'September', 'August', 'September', 'September', 'August', 'August', 'September', 'September', 'August', 'October', 'September', 'September', 'July', 'August', 'September', 'October', 'August', 'September', 'October', 'September', 'September', 'October']

# years of hurricanes
years = [1924, 1928, 1932, 1932, 1933, 1933, 1935, 1938, 1953, 1955, 1961, 1961, 1967, 1969, 1971, 1977, 1979, 1980, 1988, 1989, 1992, 1998, 2003, 2004, 2005, 2005, 2005, 2005, 2007, 2007, 2016, 2017, 2017, 2018]

# maximum sustained winds (mph) of hurricanes
max_sustained_winds = [165, 160, 160, 175, 160, 160, 185, 160, 160, 175, 175, 160, 160, 175, 160, 175, 175, 190, 185, 160, 175, 180, 165, 165, 160, 175, 180, 185, 175, 175, 165, 180, 175, 160]

# areas affected by each hurricane
areas_affected = [['Central America', 'Mexico', 'Cuba', 'Florida', 'The Bahamas'], ['Lesser Antilles', 'The Bahamas', 'United States East Coast', 'Atlantic Canada'], ['The Bahamas', 'Northeastern United States'], ['Lesser Antilles', 'Jamaica', 'Cayman Islands', 'Cuba', 'The Bahamas', 'Bermuda'], ['The Bahamas', 'Cuba', 'Florida', 'Texas', 'Tamaulipas'], ['Jamaica', 'Yucatn Peninsula'], ['The Bahamas', 'Florida', 'Georgia', 'The Carolinas', 'Virginia'], ['Southeastern United States', 'Northeastern United States', 'Southwestern Quebec'], ['Bermuda', 'New England', 'Atlantic Canada'], ['Lesser Antilles', 'Central America'], ['Texas', 'Louisiana', 'Midwestern United States'], ['Central America'], ['The Caribbean', 'Mexico', 'Texas'], ['Cuba', 'United States Gulf Coast'], ['The Caribbean', 'Central America', 'Mexico', 'United States Gulf Coast'], ['Mexico'], ['The Caribbean', 'United States East coast'], ['The Caribbean', 'Yucatn Peninsula', 'Mexico', 'South Texas'], ['Jamaica', 'Venezuela', 'Central America', 'Hispaniola', 'Mexico'], ['The Caribbean', 'United States East Coast'], ['The Bahamas', 'Florida', 'United States Gulf Coast'], ['Central America', 'Yucatn Peninsula', 'South Florida'], ['Greater Antilles', 'Bahamas', 'Eastern United States', 'Ontario'], ['The Caribbean', 'Venezuela', 'United States Gulf Coast'], ['Windward Islands', 'Jamaica', 'Mexico', 'Texas'], ['Bahamas', 'United States Gulf Coast'], ['Cuba', 'United States Gulf Coast'], ['Greater Antilles', 'Central America', 'Florida'], ['The Caribbean', 'Central America'], ['Nicaragua', 'Honduras'], ['Antilles', 'Venezuela', 'Colombia', 'United States East Coast', 'Atlantic Canada'], ['Cape Verde', 'The Caribbean', 'British Virgin Islands', 'U.S. Virgin Islands', 'Cuba', 'Florida'], ['Lesser Antilles', 'Virgin Islands', 'Puerto Rico', 'Dominican Republic', 'Turks and Caicos Islands'], ['Central America', 'United States Gulf Coast (especially Florida Panhandle)']]

# damages (USD($)) of hurricanes
damages = ['Damages not recorded', '100M', 'Damages not recorded', '40M', '27.9M', '5M', 'Damages not recorded', '306M', '2M', '65.8M', '326M', '60.3M', '208M', '1.42B', '25.4M', 'Damages not recorded', '1.54B', '1.24B', '7.1B', '10B', '26.5B', '6.2B', '5.37B', '23.3B', '1.01B', '125B', '12B', '29.4B', '1.76B', '720M', '15.1B', '64.8B', '91.6B', '25.1B']

# deaths for each hurricane
deaths = [90,4000,16,3103,179,184,408,682,5,1023,43,319,688,259,37,11,2068,269,318,107,65,19325,51,124,17,1836,125,87,45,133,603,138,3057,74]

# 1
# Update Recorded Damages
conversion = {"M": 1000000,
              "B": 1000000000}
def updated_damages(damage):
  for ind in range(len(damage)):
    data = damage[ind]
    if data == "Damages not recorded":
      continue
    elif data[-1] == "B":
      damage[ind] = float(data[:-1])*conversion["B"]
    else:
      damage[ind] = float(data[:-1])*conversion["M"]
  return damage
updated = updated_damages(damages)
# test function by updating damages
#print(updated_damages(damages))
# 2 
# Create a Table
def convert_to_dict(names):
  dct = {}
  for ind in range(len(names)):
    name = names[ind]
    dct[name] = {'Name':names[ind], 'Month': months[ind], 'Year': years[ind], 'Max Sustained Wind':max_sustained_winds[ind] , 'Areas Affected': areas_affected[ind], 'Damage':damages[ind], 'Deaths': deaths[ind]}
  
  return dct
dic = convert_to_dict(names)
# Create and view the hurricanes dictionary
#print(convert_to_dict(names))
# 3
# Organizing by Year
def convert_to_years(dic):
  dctn = {}
  for key, val in dic.items():
    if val['Year'] in dctn:
      dctn[val['Year']] += [val]
    else:
      dctn.update({val['Year']:[val]})
  return dctn
#print(convert_to_years(convert_to_dict(names)))
# create a new dictionary of hurricanes with year and key

# 4
# Counting Damaged Areas
def damaged_areas(dct):
  dctn = {}
  for key, val in dct.items():
    for item in val['Areas Affected']:
      if item in dctn:
        dctn[item] += 1
      else:
        dctn.update({item: 1})
  return dctn

# create dictionary of areas to store the number of hurricanes involved in
dict5 = damaged_areas(dic) 
#print(damaged_areas(dic))

# 5 
# Calculating Maximum Hurricane Count
def max_hurricane_count(dctn):
  lst, dct = [], {}
  
  for key,val  in dctn.items():
    if any(val in x for x in lst):
      lst[[x for x,y in zip(range(len(lst)),lst) if y[0]==val][0]] += [key]
    else:
      lst += [[val,key]]
  sorted_values = sorted(lst,reverse=True)
  return lst[lst.index(max(lst))]
dict6 = max_hurricane_count(dict5)
#print(dict6)

# find most frequently affected area and the number of hurricanes involved in

# 6
# Calculating the Deadliest Hurricane
def most_deadly_hurricane(dic1):
  dctn = {}
  for key, val in dic1.items():
    if val['Deaths'] in dctn:
      dctn[val['Deaths']] += [val['Name']]
    else:
      dctn.update({val['Deaths']:[val['Name']]})
  
  return [dctn[sorted(dctn,reverse=True)[0]],sorted(dctn,reverse=True)[0]]
# find highest mortality hurricane and the number of deaths
dict7 = most_deadly_hurricane(dic)
#
#print(dict7)
# 7
# Rating Hurricanes by Mortality
def rating_by_deaths(dctn):
  dc = {}
  for key,val in dctn.items():
    if val['Deaths'] <= 100:
      if 1 in dc:
        dc[1] += [dctn[key]]
      else:
        dc.update({1:[dctn[key]]})
    elif val['Deaths'] <= 500:
      if 2 in dc:
        dc[2] += [dctn[key]]
      else:
        dc.update({2:[dctn[key]]})
    elif val['Deaths'] <= 1000:
      if 3 in dc:
        dc[3] += [dctn[key]]
      else:
        dc.update({3:[dctn[key]]})
    elif val['Deaths'] <= 10000:
      if 4 in dc:
        dc[4] += [dctn[key]]
      else:
        dc.update({4:[dctn[key]]})
    else:
      if 5 in dc:
        dc[5] += [dctn[key]]
      else:
        dc.update({5:[dctn[key]]})
  return dc
# categorize hurricanes in new dictionary with mortality severity as key
dic8 = rating_by_deaths(dic)
#print(dic8)

# 8 Calculating Hurricane Maximum Damagse
def most_sevearly_hurricane(dic1):
  dctn, mx = {},0
  for key, val in dic1.items():
    if type(val['Damage']) != str :
      if val['Damage'] > mx:
        mx = val['Damage']
        #print(mx)
    if val['Damage'] in dctn:
      dctn[val['Damage']] += [val['Name']]
    else:
      dctn.update({val['Damage']:[val['Name']]})
 
  return [dctn[mx],mx]
# find highest damage inducing hurricane and its total cost
dic9 = most_sevearly_hurricane(dic)
print( dic9)

# 9
# Rating Hurricanes by Damage
damage_scale = {0: 0,
                1: 100000000,
                2: 1000000000,
                3: 10000000000,
                4: 50000000000}
  
# categorize hurricanes in new dictionary with damage severity as key
def rating_by_sevearity(dctn):
  dc = {}
  for key,val in dctn.items():
    if type(val['Damage']) != str :
      if val['Damage'] <= 100000000:
        if 1 in dc:
          dc[1] += [dctn[key]]
        else:
          dc.update({1:[dctn[key]]})
      elif val['Damage'] <= 1000000000:
        if 2 in dc:
          dc[2] += [dctn[key]]
        else:
          dc.update({2:[dctn[key]]})
      elif val['Damage'] <=  10000000000:
        if 3 in dc:
          dc[3] += [dctn[key]]
        else:
          dc.update({3:[dctn[key]]})
      elif val['Damage'] <= 50000000000:
        if 4 in dc:
          dc[4] += [dctn[key]]
        else:
          dc.update({4:[dctn[key]]})
      else:
        if 5 in dc:
          dc[5] += [dctn[key]]
        else:
          dc.update({5:[dctn[key]]})
    else:
      if 0 in dc:
          dc[0] += [dctn[key]]
      else:
          dc.update({0:[dctn[key]]})

  return dc
print(rating_by_sevearity(dic))
